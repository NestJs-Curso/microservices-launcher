version: "3.8"
name: cursos-nestjs
services:
  # --------------------
  # Infraestructura
  # --------------------

  # Servicio de mensajería NATS
  nats-server:
    image: nats:latest
    ports:
      - 8222:8222

  # Base de datos para órdenes
  orders-db:
    container_name: orders-db
    image: postgres:latest
    restart: always
    volumes:
      - ./orders-ms/postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orders_db

  # --------------------
  # Microservicios
  # --------------------

  # API Gateway principal
  client-gateway:
    build: ./client-gateway
    ports:
      - ${CLIENT_GATEWAY_PORT}:3000
    volumes:
      - ./client-gateway/src:/usr/src/app/src
    command: npm run start:dev
    environment:
      - PORT=3000
      - NATS_SERVERS=nats://nats-server:4222
    depends_on:
      - nats-server

  # Microservicio de productos
  products-service:
    build: ./products-ms
    volumes:
      - ./products-ms/src:/usr/src/app/src
    command: npm run start:dev
    environment:
      - PORT=3001
      - NATS_SERVERS=nats://nats-server:4222
      - DATABASE_URL=file:./dev.db
    depends_on:
      - nats-server

  # Microservicio de órdenes
  orders-service:
    build: ./orders-ms
    volumes:
      - ./orders-ms/src:/usr/src/app/src
    command: ./wait-for-it.sh orders-db 5432 -- npm run start:dev
    environment:
      - PORT=3002
      - NATS_SERVERS=nats://nats-server:4222
      - DATABASE_URL=postgresql://postgres:postgres@orders-db:5432/orders_db?schema=public
    depends_on:
      - orders-db
      - nats-server

  # Microservicio de pagos
  payments-service:
    build: ./payments-ms
    volumes:
      - ./payments-ms/src:/usr/src/app/src
    command: npm run start:dev
    environment:
      - PORT=${PAYMENTS_MS_PORT}
      - NATS_SERVERS=nats://nats-server:4222
      - STRIPE_SECRET=${STRIPE_SECRET}
      - STRIPE_SUCCESS_URL=${STRIPE_SUCCESS_URL}
      - STRIPE_CANCEL_URL=${STRIPE_CANCEL_URL}
      - STRIPE_ENDPOINT_SECRET=${STRIPE_ENDPOINT_SECRET}
    depends_on:
      - nats-server
    ports:
      - ${PAYMENTS_MS_PORT}:${PAYMENTS_MS_PORT}

  # Microservicio de Autentificacion
  auth-service:
    build: ./auth-ms
    volumes:
      - ./auth-ms/src:/usr/src/app/src
    command: npm run start:dev
    environment:
      - PORT=3004
      - NATS_SERVERS=nats://nats-server:4222
      - DATABASE_URL=${AUTH_DB_URL}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - nats-server

  # Servicio de Hookdeck para webhooks
  hookdeck:
    image: hookdeck/hookdeck-cli:latest
    entrypoint: ["/bin/sh"]
    command: -c "hookdeck ci --api-key ${HOOCKED_TOKEN} && hookdeck listen http://payments-service:3003 ${HOOCKED_SOURCE}"
    depends_on:
      - client-gateway
      - products-service
      - orders-service
      - payments-service
    environment:
      - HOOKDECK_API_KEY=${HOOCKED_TOKEN} # Usa tu token real
      - HOOKDECK_CONFIG_DIR=/data
    volumes:
      - ./hookdeck-data:/data
